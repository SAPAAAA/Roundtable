// models/principal.model.js

/**
 * Represents the possible roles for a Principal, mirroring the "PrincipalRole" ENUM.
 * @readonly
 * @enum {string}
 */
export const PrincipalRoleEnum = Object.freeze({
    USER: 'user',
    ADMIN: 'admin'
});

/**
 * Represents a Principal in the system, linking an Account and a Profile
 * and defining the core role.
 */
class Principal {
    /**
     * Creates an instance of Principal.
     * @param {string | null} principalId - The unique identifier (auto-generated by DB). Null if new.
     * @param {string} accountId - The unique identifier for the associated Account.
     * @param {string} profileId - The unique identifier for the associated Profile.
     * @param {typeof PrincipalRoleEnum[keyof typeof PrincipalRoleEnum]} role - The role of the principal ('user' or 'admin').
     */
    constructor(principalId, accountId, profileId, role) {
        /** @type {string | null} */
        this.principalId = principalId;

        /** @type {string} */
        this.accountId = accountId;

        /** @type {string} */
        this.profileId = profileId;

        /**
         * The role of the principal. Should be one of the values from PrincipalRoleEnum.
         * @type {typeof PrincipalRoleEnum[keyof typeof PrincipalRoleEnum]}
         */
        this.role = role; // Add validation if necessary
    }

    /**
     * Converts a database row to a Principal instance.
     * @param {Object} row - The database row.
     * @returns {Principal | null} The Principal instance or null if no row is provided.
     */
    static fromDbRow(row) {
        if (!row) return null;
        // Assuming row.role contains 'user' or 'admin' from the DB
        return new Principal(
            row.principalId,
            row.accountId,
            row.profileId,
            row.role
        );
    }

    /**
     * Example validation method (optional)
     * @param {any} value
     * @returns {boolean}
     */
    static isValidRole(value) {
        return Object.values(PrincipalRoleEnum).includes(value);
    }
}

export default Principal;