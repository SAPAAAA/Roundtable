// models/subscription.model.js

/**
 * Represents a user's subscription to a Subtable.
 */
class Subscription {
    /**
     * Creates an instance of Subscription.
     * @param {string | null} subscriptionId - The unique identifier (UUID), null if new and generated by DB.
     * @param {string} userId - The UUID of the RegisteredUser subscribing. Required.
     * @param {string} subtableId - The UUID of the Subtable being subscribed to. Required.
     * @param {Date | null} [subscribedAt=null] - Timestamp of subscription (set by DB default).
     */
    constructor(subscriptionId, userId, subtableId, subscribedAt = null) {
        /** @type {string | null} */
        this.subscriptionId = subscriptionId;

        /** @type {string} */
        this.userId = userId;

        /** @type {string} */
        this.subtableId = subtableId;

        /** @type {Date | null} */
        // Ensure subscribedAt is a Date object if provided, otherwise null
        this.subscribedAt = subscribedAt ? new Date(subscribedAt) : null;
    }

    /**
     * Converts a database row object into a Subscription instance.
     * Assumes the database row keys match the constructor parameter names (or are mapped accordingly).
     * Expects 'subscriptionId', 'userId', 'subtableId', 'subscribedAt'.
     * @param {Object} row - The database row object (e.g., from node-postgres query result).
     * @returns {Subscription | null} A Subscription instance or null if no row provided.
     */
    static fromDbRow(row) {
        if (!row) {
            return null;
        }

        const subscriptionId = row.subscriptionId || row.subscription_id;
        const userId = row.userId || row.user_id;
        const subtableId = row.subtableId || row.subtable_id;
        const subscribedAt = row.subscribedAt || row.subscribed_at;

        return new Subscription(
            subscriptionId,
            userId,
            subtableId,
            subscribedAt // Constructor handles Date conversion
        );
    }
}

export default Subscription;
