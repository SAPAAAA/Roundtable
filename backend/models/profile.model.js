// models/profile.js

/**
 * Represents the possible gender identities, mirroring the "Gender" ENUM in the database.
 * Using Object.freeze to make it immutable, similar to a traditional enum.
 * @readonly
 * @enum {string}
 */
export const GenderEnum = Object.freeze({
    MALE: 'male',
    FEMALE: 'female',
    NON_BINARY: 'non_binary',
    OTHER: 'other',
    PREFER_NOT_TO_SAY: 'prefer_not_to_say'
});

/**
 * Represents a User's Profile data.
 * Note: In this schema version, the Profile is linked to an Account *only*
 * through the RegisteredUser table, not directly here.
 */
class Profile {
    /**
     * Creates an instance of Profile.
     * @param {string | null} profileId - The unique identifier (auto-generated by DB). Null if new.
     * @param {string | null} [avatar=null] - URL or path to the user's avatar image.
     * @param {string | null} [banner=null] - URL or path to the user's banner image.
     * @param {string | null} [bio=null] - A short biography or description.
     * @param {string | null} [location=null] - The user's location.
     * @param {string | null} [displayName=null] - The user's preferred display name.
     * @param {typeof GenderEnum[keyof typeof GenderEnum] | null} [gender=null] - The user's gender identity. Should be one of the values from GenderEnum or null.
     */
    constructor(profileId, avatar = null, banner = null, bio = null, location = null, displayName = null, gender = null) {
        /** @type {string | null} */
        this.profileId = profileId;

        /** @type {string | null} */
        this.avatar = avatar;

        /** @type {string | null} */
        this.banner = banner;

        /** @type {string | null} */
        this.bio = bio;

        /** @type {string | null} */
        this.location = location;

        /** @type {string | null} */
        this.displayName = displayName;

        /**
         * The user's gender identity. Ideally holds one of the values from GenderEnum or null.
         * @type {typeof GenderEnum[keyof typeof GenderEnum] | null}
         */
        this.gender = gender; // Note: Add validation here if needed to ensure only valid enum values are set.
    }

    /**
     * Converts a database row to a Profile instance.
     * @param {Object} row - The database row.
     * @returns {Profile | null} The Profile instance or null if no row is provided.
     */
    static fromDbRow(row) {
        if (!row) return null;
        // Assuming the database row.gender directly contains one of the string values
        // like 'male', 'female', etc.
        return new Profile(
            row.profileId,
            row.avatar,
            row.banner,
            row.bio,
            row.location,
            row.displayName,
            row.gender // The string value from DB should match one of the GenderEnum values
        );
    }

    /**
     * Example validation method (optional)
     * @param {any} value
     * @returns {boolean}
     */
    static isValidGender(value) {
        return value === null || Object.values(GenderEnum).includes(value);
    }
}

export default Profile;