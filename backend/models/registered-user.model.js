// models/registeredUser.js

/**
 * Represents the possible statuses for a Registered User, mirroring the "UserStatus" ENUM.
 * @readonly
 * @enum {string}
 */
export const UserStatusEnum = Object.freeze({
    ACTIVE: 'active',
    SUSPENDED: 'suspended',
    BANNED: 'banned'
});

/**
 * Represents detailed information for a Registered User,
 * linking a Principal to user-specific attributes.
 */
class RegisteredUser {
    /**
     * Creates an instance of RegisteredUser.
     * @param {string | null} userId - The unique identifier (auto-generated by DB). Null if new.
     * @param {string} principalId - The Principal's unique identifier (FK to Principal table).
     * @param {number} [karma=0] - User's reputation score. Defaults to 0.
     * @param {boolean} [isVerified=false] - Whether the user account is verified. Defaults to false.
     * @param {typeof UserStatusEnum[keyof typeof UserStatusEnum]} [status='active'] - User's status. Defaults to 'active'. Should be one of UserStatusEnum values.
     * @param {Date | string | null} [lastActive=null] - Timestamp of last activity. Null if new or never active.
     */
    constructor(userId, principalId, karma = 0, isVerified = false, status = UserStatusEnum.ACTIVE, lastActive = null) {
        /** @type {string | null} */
        this.userId = userId;

        /** @type {string} */
        this.principalId = principalId; // Corrected JSDoc above, was accountId

        /** @type {number} */
        this.karma = karma;

        /** @type {boolean} */
        this.isVerified = isVerified;

        /**
         * User's status. Should hold one of the values from UserStatusEnum.
         * @type {typeof UserStatusEnum[keyof typeof UserStatusEnum]}
         */
        this.status = status; // Default set to UserStatusEnum.ACTIVE

        /** @type {Date | null} */
        this.lastActive = lastActive ? new Date(lastActive) : null;
    }

    /**
     * Converts a database row to a RegisteredUser instance.
     * @param {Object} row - The database row.
     * @returns {RegisteredUser | null} The RegisteredUser instance or null if no row is provided.
     */
    static fromDbRow(row) {
        if (!row) return null;
        // Assuming row.status directly contains 'active', 'suspended', or 'banned'
        return new RegisteredUser(
            row.userId,
            row.principalId, // Matching the SQL schema column name 'principal_fk'
            row.karma,
            row.isVerified,
            row.status,
            row.lastActive
        );
    }

    /**
     * Example validation method (optional)
     * @param {any} value
     * @returns {boolean}
     */
    static isValidStatus(value) {
        return Object.values(UserStatusEnum).includes(value);
    }
}

export default RegisteredUser;